from typing import Optional
from fastapi import FastAPI, Response, status, HTTPException, Depends
from pydantic import BaseModel
from psycopg.rows import dict_row
from random import randrange
import psycopg
import time
# Related to SQL Alchemy
from . import models
from .database import engine, SessionLocal, get_db
from sqlalchemy.orm import Session

models.Base.metadata.create_all(bind=engine)


app = FastAPI()


class Post(BaseModel):
    title: str
    content: str
    published: bool = True


# Setting up Psycpg
while True:
    try:
        conn = psycopg.connect(host='localhost', dbname='fastapi',
                               user='postgres', password='Nisstome123!@#OF', row_factory=dict_row)
        cursor = conn.cursor()  # Use this to execute SQL statements
        print("db connection was successful!")
        break
    except Exception as error:  # Get the error stored in Exception and store it in variable called error to be used for our message
        print("Connecting to db failed....")
        print("Error Details: ", error)
        time.sleep(2)  # to wait a little (2 seconds) before trying again


@app.get('/')
def root():
    return "Hello Message"


@app.get('/sqlalchemy')
# Depends makes the sql alchemy a dependency
def test_posts(db: Session = Depends(get_db)):
    # This db.query is literally just a sql command in disguise (abstracting all the sql logic away)
    # the print statement of posts would produce this: SELECT posts.id AS posts_id, posts.title AS posts_title, posts.content AS posts_content, posts.published AS posts_published
    # FROM posts
    # So we don't need much understanding of SQL

    # This creates the Query - to run the Query, we need another method like .all()
    # .all is going to take the sql query generated by the db.query method on the post model
    # and run it against the db and return the results
    posts = db.query(models.Post).all()
    print(posts)
    return {"data": "succ"}


@app.get('/posts')
def get_posts(db: Session = Depends(get_db)):
    posts = db.query(models.Post).all()
    return {"data": posts}


@app.post('/posts', status_code=status.HTTP_201_CREATED)
def create_posts(post: Post, db: Session = Depends(get_db)):
    # can not use f"" -> makes vulnerable for SQL injection - user can insert SQL stuff!
    # SQL library can sanitize the input for us this way!
    # Staged changes
    # cursor.execute(
    #    """INSERT INTO posts(title, content, published) VALUES(%s, %s, %s) RETURNING *""",
    #    (post.title, post.content, post.published))
    # createdPost = cursor.fetchone()
    # TO SAVE THE DATA (BECAUSE UNTIL THIS POINT THE POST IS CREATED BY NOT COMMITTTED TO DB)
    # WE HAVE TO COMM IT IT USING ONE FINAL STEP
    # conn.commit()
    new_post = models.Post(**post.model_dump())
    db.add(new_post)
    db.commit()
    db.refresh(new_post)
    return {"data": new_post}


@app.get('/posts/{id}')
def get_post(id: int, db: Session = Depends(get_db)):
    # cursor.execute(
    #    """SELECT * FROM posts WHERE id = %s""", (id,))
    # postRetrieved = cursor.fetchone()
    # print(postRetrieved)
    # filter does what WHERE does
    # .all() is like a loop of everything - we should do first() since we know there is gonna be just one instance
    postRetrieved = db.query(models.Post).filter(models.Post.id == id).first()
    if not postRetrieved:
        raise (HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                             detail=f"post with id {id} was not found"))
    return {"post_details": postRetrieved}


@app.delete('/posts/{id}', status_code=status.HTTP_204_NO_CONTENT)
def delete_posts(id: int, db: Session = Depends(get_db)):
    # cursor.execute("""DELETE FROM posts WHERE id = %s RETURNING *""", (id,))
    # postDeleted = cursor.fetchall()
    # print(postDeleted)
    # conn.commit()
    # No need for a return statement in FastAPI in this case since we should handle it via HTTP_204_NO_CONTENT
    post = db.query(models.Post).filter(models.Post.id == id)
    # if the query returns back anything
    if not post.first():
        raise (HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                             detail=f'Could not find post with id {id}'))
    else:
        post.delete(synchronize_session=False)
        db.commit()


@app.put('/posts/{id}')
# Make sure post comes in with the right schema
def update_post(id: int, post: Post, db: Session = Depends(get_db)):
    # cursor.execute(
    #    """UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s RETURNING *""",
    #    (post.title, post.content, post.published, id))
    # postUpdated = cursor.fetchone()
    post_query = db.query(models.Post).filter(models.Post.id == id)
    postUpdate = post_query.first()
    if not postUpdate:
        raise (HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                             detail=f'post with id {id} does not exist!'))
    else:
        post_query.update(post.model_dump(),
                          synchronize_session=False)
        db.commit()
        # updated_post = db.refresh(post)
        # conn.commit()
        return {"post_details": post_query.first()}
